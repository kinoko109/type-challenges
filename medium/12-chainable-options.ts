// q
// https://github.com/type-challenges/type-challenges/blob/main/questions/00012-medium-chainable-options/README.ja.md

// a
// https://www.typescriptlang.org/play?#code/PQKgUABBCMBMEFoIGEAWBDAlgO3QIwBsBTCAeQAcAXTAe2wGdJEEXWm8BPCAQW0tTpcAYgFcIACgAC6PgDMRASggBiQLRygLF8V6cuQKYAxump0wTZeYiArmMDyqqagApdADd0AZX0AnTFQiBzBkD2DICADICDDIDlDIAlDIDPDID3yoC-AYBWDIBVDIDrDIDtDIDnDJGAMgyAEQyA8gyA-vKA8QyAMQyAfgyAmgyAQAyA6gyA0gw1gQAqHORE7l4+gNYMgOBKgFEMgP9mgBIMgPoMgBYMgLIMgYDG1jV5gNHqgEkMgBtygIoMgNEMgMoMY1m+E5V1gPj-dhCbgHYMgE1RgDIZAYGJgGsMgB0MoYD1DIATDL6AQQwvgJcMgJ0MX0AqvJfQAiDCCzr5AhAAAY0Ki0bDiADWRA4ABoIC4CCIiApoRAxjCAOZESjiPEQM4QeCAEwYzoAi1MADqaLQALxoBs+Qq6yWgCztQCV-jVAGYMeUABgyAVQYQVVYfC6PjboA4OSGgEiGEojQC1DIAfhjGgBIFRYFQDGDALAH-OgAp1Kn6OiyTBEylLQCHRoBWfT2lSqgABzQBCvoAQt3igAVfQA55v5iaTZYA15UA6fqc7ZdGplGqAcIZAGIMVROgGj5IaABwYTtCs5RGFAACZEfQEdAeEjmhiUCDly1EgBcKAwOHwxBO5foldL9BEBErAF4qxarUwoAA6OHGREAclkNBok4xcAAzAphxAx9Kp7gALZEecQSeUVpEBD6DAEYjYEn0ScrqCj8cI8STvAlvcAb0x6GxRHrk4AEkQ540BAADqNAeAQeaThAAC+t53iOJJkiuTDAMAEBEAAHm0+iVvwJCHm0EA0LIECdt2eHAXgP5MDglBEB4sjoPoJAAEpEF2PYQG+q4zjQ9bYCIW7UR4q7bj+EDtl4l6ri+Hj1jxd53liOL1lJOBEquMFMNpUBZtCJznNYVyLIAx5F5CMgCBDF0EAAFb0MAOaUoAtwyPIAwwwvIsgAfZnkgCj+oAgZH+IAQgx9GUgDaDIAyQxVPMgA3DIAmwyANcMZyuR5wqrN5IJCmKEqZiiHD4gG0LqZe+JnIA-gyLIA68qrGsgTQipRAFYA33KAPCGZxLNVazrGMgB3ctygqfIA05YguFUWADAqgAaDDCeX4lk1IQIAe2qAIR2oolFsYzBaFkVJkwAB8EAAOKYJQf4iHgviAF0egCxUZygBY-6glCUOQ9C1mhOaniO9ljh4RLAHAwC2egYAgMApigBAAD6UPQzD0OnJsXSAM0M6qAJMMiyABhRgCmipDsO4xDEAg6YhEkGgWC4IQRAADxNBA-ZvjB+100wD50PWlMANIYZh9HYHm9CSZQ0lEhiABqu3iKueX1pzWE83zEB5SREA0wA-BA2BEE4DEQNLaKrg19Yi-Bvb7TL3NELz-OK6RqsNmTzZU6QW7HdTGLs-tABkEDseaHh5hzou7ft9ak02FPUxAXs++B-vs4Hu1MEh9bkrT+1NGA2lgODeO4xAgBjDH8byAI0M6p-DjOdw4TmBbuQ4F4Ue3E8HoKIYgAothhaVjBECyB4NBbvukjEyeZ4XlewAiNQBDXqYBZFiWZZ0O2EDoCHjbky2YBth2HEUdAtMr0w64Tk+fF7ku8HH4+z6vhiH4G-uAFAaB4GQdBcFHyzm7oDue4HkeI8vxjw4jeI+SFySmG3mRXePZ4D9iBveDcT5xJ-xkDQfCHh1Y-13PBNCEAh70AQFhHClAiEeD7qJRBJ9JwoIxJOYsy8UGX3AShKB5EeyLgPggtcX9kHYNQdgdBqBtZMNQuhAhRCO64TIRQz+SCaH8IXLAZcYDSQQLAMTKs6B6AcQPgAbSYO3EhlNuDNypsTJW7DKDQDblI+ieZoBBz1lAIxncTFmMphY0iVjYC2JIUQPMsAnGGLse4zAKJPFHksTAygi4-GdwCYuYJABdImDdXG4QCfvJmUA+ICSEiJdgJYFL6y-KpAWQsdJMHEmpQWGkM5pKIhk+xcDuLVOwbUypmdNHNMSQfRSWCdz5OEgxBpWcQDlwrvjQAhNZnD+HnNyyRJkVwJqDUAe0ICmUACreixACOioASHM7oPSei9N69APpfXAr9f6Mh6AAHcGIA24ftbZixADRkese6j1nqvUcuc1An16DfWubAYA9AaDYgnLmCA+1AC6DGcQAa3KXCuF8k5vz3oAsuT9J5wNQZAA

// もしkeyが既にT型のキーとして存在していれば（K extends keyof T ? never : K）、そのキーを再び使用することはできない（never）。これにより、既存のキーを上書きすることなく、型安全性を保つ。
// キーがTに存在しない場合、そのキーと値のペアを含む新しいオブジェクト型を返す。これにより、オブジェクトTに新しいプロパティが追加され、メソッドチェーンを通じてさらにオプションを追加することができる。
type Chainable<T = {}> = {
  option: <K extends string, V>(
    key: K extends keyof T ? never : K,
    value: V)
  => K extends keyof T ? Chainable<Omit<T, K> & Record<K, V>> : Chainable<T & Record<K, V>>
  get: () => T
}
